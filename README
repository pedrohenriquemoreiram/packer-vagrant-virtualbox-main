---

## ðŸ›  Etapas Executadas

### âœ… 1. Provisionamento Automatizado
Com Vagrant + Ansible:

- `Vagrantfile` cria VM Debian
- Ansible instala dependÃªncias com playbooks:
  - Docker
  - Kubectl
  - Kind
  - ArgoCD
  - Nginx (teste)

### âœ… 2. CriaÃ§Ã£o do Cluster Kubernetes
Cluster criado com **Kind**, verificado via `kubectl get nodes`.

### âœ… 3. InstalaÃ§Ã£o do ArgoCD
Realizada via Ansible (`install_argocd.yml`), utilizando manifesto oficial do projeto.

### âœ… 4. Deploy da AplicaÃ§Ã£o (em progresso)
YAMLs criados em `k8s/` para `deployment`, `service`, e `pod` â€” prontos para GitOps com ArgoCD.

---

## ðŸš€ Como Rodar o Projeto

```bash
# Subir VM
vagrant up

# Executar playbooks Ansible (exemplo)
cd packer-vagrant-virtualbox-main/ansible
ansible-playbook -i hosts install_docker.yml
ansible-playbook -i hosts install_kubectl.yml
ansible-playbook -i hosts install_kind.yml
ansible-playbook -i hosts install_argocd.yml

## ðŸ§  Backend com FastAPI

O backend da aplicaÃ§Ã£o foi implementado com **FastAPI**, framework moderno e leve para construÃ§Ã£o de APIs REST em Python.

### Funcionalidades implementadas:
- `GET /ping`: retorna uma mensagem de teste ("pong") para verificaÃ§Ã£o da API.
- `GET /db`: tenta conexÃ£o com um banco de dados PostgreSQL.

### Como executar localmente

1. Entre na pasta do backend:
```bash
cd app

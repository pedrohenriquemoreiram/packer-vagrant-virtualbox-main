---

## 🛠 Etapas Executadas

### ✅ 1. Provisionamento Automatizado
Com Vagrant + Ansible:

- `Vagrantfile` cria VM Debian
- Ansible instala dependências com playbooks:
  - Docker
  - Kubectl
  - Kind
  - ArgoCD
  - Nginx (teste)

### ✅ 2. Criação do Cluster Kubernetes
Cluster criado com **Kind**, verificado via `kubectl get nodes`.

### ✅ 3. Instalação do ArgoCD
Realizada via Ansible (`install_argocd.yml`), utilizando manifesto oficial do projeto.

### ✅ 4. Deploy da Aplicação (em progresso)
YAMLs criados em `k8s/` para `deployment`, `service`, e `pod` — prontos para GitOps com ArgoCD.

---

## 🚀 Como Rodar o Projeto

```bash
# Subir VM
vagrant up

# Executar playbooks Ansible (exemplo)
cd packer-vagrant-virtualbox-main/ansible
ansible-playbook -i hosts install_docker.yml
ansible-playbook -i hosts install_kubectl.yml
ansible-playbook -i hosts install_kind.yml
ansible-playbook -i hosts install_argocd.yml

## 🧠 Backend com FastAPI

O backend da aplicação foi implementado com **FastAPI**, framework moderno e leve para construção de APIs REST em Python.

### Funcionalidades implementadas:
- `GET /ping`: retorna uma mensagem de teste ("pong") para verificação da API.
- `GET /db`: tenta conexão com um banco de dados PostgreSQL.

### Como executar localmente




1. Entre na pasta do backend:
```bash
cd app

## 🌐 Acessando o ArgoCD

1. Realize o port-forward do serviço:
```bash
kubectl port-forward svc/argocd-server -n argocd --address 0.0.0.0 8080:443
```

2. Acesse o painel no navegador:
```
http://localhost:8080
```

3. Login:
- Usuário: `admin`
- Senha: `minhanovasenha` *(ou a senha customizada definida com htpasswd)*

---

## 🔁 Deploy automático com ArgoCD

A aplicação GitOps é configurada em `k8s/app/app-argocd.yaml`, que aponta para este repositório e sincroniza automaticamente as pastas com os manifests de backend, frontend e banco de dados.

```yaml
syncPolicy:
  automated:
    prune: true
    selfHeal: true
```

---

## 📌 Tecnologias Utilizadas

- Vagrant
- Ansible
- Docker
- Kubernetes (Kind)
- ArgoCD
- FastAPI
- PostgreSQL
